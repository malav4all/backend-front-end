variables:
  GIT_STRATEGY: clone

stages:
  - build_stage
  - build_container_image
  - stage_deploy
  - prod_deploy

build_project:
  stage: build_stage
  image: node:alpine
  before_script:
    - apk update && apk add git
  script:
    - unset CI
    - export DISABLE_ESLINT_PLUGIN=true
    - echo "Creating production build"
    - npm install --force 
    - npm run build
    - ls -ltrha
  artifacts:
    paths:
      - build
    when: on_success
    expire_in: 30 days
  tags:
    - docker-builder

build_container_image:
  stage: build_container_image
  needs:
    - job: build_project
      artifacts: true
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - apk update && apk add git
  script:
    - echo "Creating production docker image"
    - docker login docker.imz.world -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
    - docker build --file CodeBuild -t docker.imz.world/event-console/console:latest .
    - docker push docker.imz.world/event-console/console:latest
    - docker logout
  tags:
    - docker-builder

deploy_staging:
  stage: stage_deploy
  needs:
    - job: build_container_image
      artifacts: true
  before_script:
    - git reset --hard
    - git clean -fdx
    - git fetch --all --unshallow
  script:
    - echo "Staging build......"
    - docker login docker.imz.world -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
    - docker ps -a | grep console-stage-frontend && docker stop console-stage-frontend > /dev/null 2>&1 || true
    - docker rm console-stage-frontend > /dev/null 2>&1 || true
    - docker rmi docker.imz.world/event-console/console:latest > /dev/null 2>&1 || true
    - docker pull docker.imz.world/event-console/console:latest
    - docker run -itd --rm --name console-stage-frontend -p 2001:80 docker.imz.world/event-console/console:latest
    - docker logout
  when: manual
  rules:
    - if: '$CI_COMMIT_BRANCH == "development"'
      when: always
    - when: never
  tags:
    - shell-builder

deploy_production:
  stage: prod_deploy
  needs:
    - job: build_container_image
      artifacts: true
  before_script:
    - git fetch --all
  script:
    - echo "Production deploy stage"
    - docker login docker.imz.world -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
    - docker ps -a | grep console-prod-frontend && docker stop console-prod-frontend > /dev/null 2>&1 || true
    - docker rm console-prod-frontend > /dev/null 2>&1 || true
    - docker rmi docker.imz.world/event-console/console:latest > /dev/null 2>&1 || true
    - docker pull docker.imz.world/event-console/console:latest
    - docker run -itd --rm --name console-prod-frontend -p 2002:80 docker.imz.world/event-console/console:latest
    - docker logout
  when: manual
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: always
    - when: never
  tags:
    - shell-builder
