# variables:
#   GIT_DEPTH: 20
#   GIT_STRATEGY: fetch
#   GIT_FETCH_TIMEOUT: 60

stages:
  - build_stage
  - stage_deploy
  - prod_deploy

# before_script:
#   - rm -rf .git
#   - git init
#   - git remote add origin $CI_REPOSITORY_URL
#   - git fetch --depth 20 origin $CI_COMMIT_REF_NAME

build_project:
  stage: build_stage
  image: node:alpine
  # services:
  #   - docker:24.0.5-dind
  before_script:
    - apk update && apk add git
  script:
    - echo "Creating production build"
    - npm i --force
    - ls -ltrha
  artifacts:
    paths:
      - /code/build
    when: on_success
    expire_in: 30 days
  tags:
    - docker-builder

build_image:
  stage: build_stage
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - apk update && apk add git
  script:
    - echo "Creating production docker image"
    - docker login docker.imz.world -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
    - docker build -t docker.imz.world/event-console/console:latest .
    - docker push docker.imz.world/event-console/console:latest
  tags:
    - docker-builder

staging:
  stage: stage_deploy
  script:
    - echo "Staging build......"
    - docker stop console-stageing > /dev/null 2>&1
    - docker rm console-stageing > /dev/null 2>&1
    - docker rmi docker.imz.world/event-console/console:latest > /dev/null 2>&1
    - docker pull docker.imz.world/event-console/console:latest
    - docker run -itd --name console-stage-frontend -p 2001:80 docker.imz.world/event-console/console:latest
  tags:
    - shell-builder

deploy:
  stage: prod_deploy
  script:
    - echo "Production deploy stage"
    - docker stop console-stageing > /dev/null 2>&1
    - docker rm console-stageing > /dev/null 2>&1
    - docker rmi docker.imz.world/event-console/console:latest > /dev/null 2>&1
    - docker pull docker.imz.world/event-console/console:latest
    - docker run -itd --name console-prod-frontend -p 2002:80 docker.imz.world/event-console/console:latest
  when: manual
  tags:
    - shell-builder


















#stages:
#  - build_image
#  - push_image
#  - deploy_container

#variables:
#  DOCKER_HOST: tcp://docker:2375/
#  DOCKER_TLS_CERTDIR: ""

# build_image:
#   stage: build_image
#   tags:
#     - server-3-docker-runner
#   image: docker:stable
#   services:
#     - docker:dind
#   script:
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#     - docker build -t $CI_REGISTRY_IMAGE/event-console/console .
#     - docker logout $CI_REGISTRY
#   only:
#     - development

# push_image:
#   stage: push_image
#   tags:
#     - server-3-docker-runner
#   image: docker:stable
#   services:
#     - docker:dind
#   script:
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#     - docker push $CI_REGISTRY_IMAGE/event-console/console
#     - docker logout $CI_REGISTRY
#   only:
#     - development

# deploy_container:
#   stage: deploy_container
#   tags:
#     - server-3-docker-runner
#   image: docker:stable
#   services:
#     - docker:dind
#   script:
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#     - docker stop $DOCKER_CONTAINER_NAME || true
#     - docker rm $DOCKER_CONTAINER_NAME || true
#     - docker rmi $CI_REGISTRY_IMAGE/event-console/console || true
#     - docker pull $CI_REGISTRY_IMAGE/event-console/console
#     - docker run -itd --name $DOCKER_CONTAINER_NAME -p 9393:80 $CI_REGISTRY_IMAGE/event-console/console
#     - docker logout $CI_REGISTRY

#   only:
#     - development
